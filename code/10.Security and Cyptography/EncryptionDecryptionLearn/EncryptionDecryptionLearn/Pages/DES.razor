@page "/DSE"
@using EncryptionDecryptionLearn.Data;
@using System.Security.Cryptography;
@using System.Text;

<PageTitle>Data Encryption Standard - DES</PageTitle>
<h3>Data Encryption Standard - DES</h3>

<div>
    <EditForm Model="@encryptModel" class="row mt-4">
        <div class="row my-3">
            <div class="col-md-2">
            <lable class="form-label">Encrypt your name: </lable>
            </div>
            <div class="col-md-4">
                <InputText class="form-control" @bind-Value="@encryptModel.Name"/>
            </div>
            <div class="col-md-4">
                <button @onclick="Encrypt" class="btn btn-dark">Submit</button>
            </div>
        </div>
    </EditForm>
    <EditForm Model="@decryptModel" class="row">
        <div class="row my-3">
            <div class="col-md-2">
            <lable class="form-label">Decrypt your name: </lable>
            </div>
            <div class="col-md-4">
                <InputText class="form-control" @bind-Value="@decryptModel.Name"/>
            </div>
            <div class="col-md-4">
                <button @onclick="Dencrypt" class="btn btn-dark">Submit</button>
            </div>
        </div>
    </EditForm>
    <div class="row">
        <label class="form-label">@lblResult</label>
    </div>
</div>

@code {
    private InputModel encryptModel = new InputModel();
    private InputModel decryptModel = new InputModel();
    private string lblResult;
    private string key = "n2r5u8x/";

    private void Encrypt()
    {
        try
        {
            using (DESCryptoServiceProvider cipher = new DESCryptoServiceProvider())
            {
                cipher.Mode = CipherMode.CBC;
                cipher.Padding = PaddingMode.PKCS7;

                cipher.KeySize = 64;
                cipher.BlockSize = 64;

                byte[] pwdBytes = Encoding.UTF8.GetBytes(this.key);
                byte[] keyBytes = new byte[8];
                int length = pwdBytes.Length;
                if (length > keyBytes.Length)
                {
                    length = keyBytes.Length;
                }
                Array.Copy(pwdBytes, keyBytes, length);
                cipher.Key = keyBytes;
                cipher.IV = keyBytes;

                ICryptoTransform transfocipher = cipher.CreateEncryptor();
                byte[] plainText = Encoding.UTF8.GetBytes(encryptModel.Name);
                byte[] encryptedText = transfocipher.TransformFinalBlock(plainText, 0, plainText.Length);
                lblResult = Convert.ToBase64String(encryptedText);
            }
        }
        catch(Exception ex)
        {
            lblResult = ex.Message;
        }
    }
    private void Dencrypt()
    {
        try
        {
            using(DESCryptoServiceProvider cipher = new DESCryptoServiceProvider())
        {
            byte[] encryptedText = Convert.FromBase64String(decryptModel.Name);
            byte[] pwdBytes = Encoding.UTF8.GetBytes(key);
            byte[] keyBytes = new byte[8];
            int length = pwdBytes.Length;
            if(length > keyBytes.Length)
            {
                length = keyBytes.Length;
            }
            Array.Copy(pwdBytes, keyBytes, length);
            cipher.Key = keyBytes;
            cipher.IV = keyBytes;

            ICryptoTransform transfocipher = cipher.CreateDecryptor();
            byte[] decryptedText = transfocipher.TransformFinalBlock(encryptedText, 0, encryptedText.Length);
            lblResult = Encoding.UTF8.GetString(decryptedText);
        }
        }
        catch(Exception ex)
        {
            lblResult = ex.Message;
        }
    }
}

